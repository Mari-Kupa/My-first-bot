import telebot
import random
import uuid
import base64
from painter import Painter
import redis
from telebot.apihelper import download_file
from config import TOKEN
from gpt import gpt_request
import time
from voice import get_audio
import os
from pathlib import Path
from telebot import types


bot = telebot.TeleBot(TOKEN)
# –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API
telebot.apihelper.RETRY_ON_HTTP_ERROR = True # –ü—ã—Ç–∞—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö HTTP
telebot.apihelper.READ_TIMEOUT = 90         # –£–≤–µ–ª–∏—á–∏—Ç—å —Ç–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è –¥–æ 90 —Å–µ–∫—É–Ω–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 25)
telebot.apihelper.CONNECT_TIMEOUT = 90      # –£–≤–µ–ª–∏—á–∏—Ç—å —Ç–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–æ 90 —Å–µ–∫—É–Ω–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 25)

user_mode = {}


@bot.message_handler(commands=['start'])
def start(message):
    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    btn1 = types.KeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    btn2 = types.KeyboardButton("üìÑ –ü–µ—Ä–µ—Å–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª")
    btn3 = types.KeyboardButton("üéô –°–ø—Ä–æ—Å–∏—Ç—å –≥–æ–ª–æ—Å–æ–º")
    btn4 = types.KeyboardButton("ü§ñ –ü—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é
    markup.add(btn1, btn2)
    markup.add(btn3, btn4)


    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –º–µ–Ω—é
    bot.send_message(
        message.chat.id,
        text=(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —É–º–Ω—ã–π –±–æ—Ç ü§ñ\n\n"
            "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
            "üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
            "üìÑ –ü–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã\n"
            "üéô –ü–æ–Ω–∏–º–∞—Ç—å –≥–æ–ª–æ—Å\n"
            "ü§ñ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n\n"
            "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:"
        ),
        reply_markup=markup
    )


@bot.message_handler(func=lambda message: message.text == "üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
def image_button(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:')
    bot.register_next_step_handler(message, handle_image)

def handle_image(message):
    chat_id = message.chat.id

    estimated_time = random.randint(30, 60)  # –∏–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

    bot.send_message(chat_id, f"–†–∞–±–æ—Ç–∞—é –Ω–∞–¥ –≤–∞—à–µ–π –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–µ–π, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å ~{estimated_time} —Å–µ–∫")
    bot.send_chat_action(chat_id, action='upload_photo')
    start_time = time.time()

    api = Painter()
    try:
        model_id = api.get_model()
    except:
        bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    try:
        u = api.generate(message.text, model_id)
    except:
        bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    try:
        images = api.check_generation(u)
    except:
        bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

    end_time = time.time()
    gen_sec = int(end_time - start_time)

    if images == 'CENSORED':
        bot.send_message(chat_id, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–ª–æ –≤ —Å–µ–±–µ —Ç–æ, —á—Ç–æ –º–æ–∂–µ—Ç –æ—Å–∫–æ—Ä–±–∏—Ç—å –¥—Ä—É–≥–∏—Ö –∏–ª–∏ –Ω–∞—Ä—É—à–∞–µ—Ç –∑–∞–∫–æ–Ω—ã –†–§')
    else:
        uniq_id = str(uuid.uuid4())
        image_path = f'images/{uniq_id}.png'

        with open(image_path, 'wb') as fpng:
            fpng.write(base64.b64decode(images[0]))
        with open(image_path, 'rb') as fim:
            bot.send_photo(chat_id, fim, caption=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ –∑–∞ ~{gen_sec} —Å–µ–∫")


def save_docunent(message):
    file_name = message.document.file_name
    file_info = bot.get_file(message.document.file_id)
    download_file = bot.download_file(file_info.file_path)
    with open(file_name, 'wb') as new_file:
        new_file.write(download_file)
    return file_name

def read_file(message):
    doc_path = save_docunent(message)
    with open(doc_path, 'r', encoding='utf-8') as text_file:
        text = text_file.read()
    result = gpt_request(f'–∫—Ä–∞—Ç–∫–æ –ø–µ—Ä–µ—Å–∫–∞–∂–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç: {text}')
    bot.send_message(message.chat.id, result)


@bot.message_handler(func=lambda message: message.text == "üìÑ –ü–µ—Ä–µ—Å–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª")
def get_file_button(message):
    to_read = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (TXT):")
    bot.register_next_step_handler(to_read, read_file)


@bot.message_handler(func=lambda message: message.text == "üéô –°–ø—Ä–æ—Å–∏—Ç—å –≥–æ–ª–æ—Å–æ–º")
def voice_button(message):
    chat_id = message.chat.id
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:üéô\n\n–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏, –Ω–∞–ø–∏—à–∏—Ç–µ /stop")
    user_mode[chat_id] = 'voice'


@bot.message_handler(content_types=['voice'])
def handle_voice(message):
    chat_id = message.chat.id
    if user_mode.get(chat_id) == 'voice':
        try:
            file_info = bot.get_file(message.voice.file_id) # 1. –ó–∞–ø—Ä–æ—Å –∫ Telegram API –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ

            down_file = bot.download_file(file_info.file_path) # 2. –ó–∞–ø—Ä–æ—Å –∫ Telegram API –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            path = f'audio/{uuid.uuid4()}.oga'
            with open(path, 'wb') as file:
                file.write(down_file)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            reply_audio_path = get_audio(path) # –ó–¥–µ—Å—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞

            with open(reply_audio_path, 'rb') as audio_file:
                bot.send_voice(message.chat.id, audio_file) # 3. –ó–∞–ø—Ä–æ—Å –∫ Telegram API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
        except Exception as e:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
    else:
        bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ.')


@bot.message_handler(func=lambda message: message.text == "ü§ñ –ü—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å")
def chat_button(message):
    chat_id = message.chat.id
    user_mode[chat_id] = 'chat'
    bot.send_message(chat_id, "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, –∏ —è –æ—Ç–≤–µ—á—É ü§ñ\n\n–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏, –Ω–∞–ø–∏—à–∏—Ç–µ /stop")

@bot.message_handler(content_types=['text'])
def handle_text(message):
    chat_id = message.chat.id
    if user_mode.get(chat_id) == 'chat':
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞
        response = gpt_request(message.text)
        bot.send_message(message.chat.id, response)
    else:
        bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ.')


@bot.message_handler(commands=['stop'])
def stop_chat(message):
    chat_id = message.chat.id
    user_mode.pop(chat_id, None)
    bot.send_message(chat_id, "–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ.")

print('–ë–æ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞–ª!')

# –£–≤–µ–ª–∏—á–∏—Ç—å —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è pollong, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã –∏–ª–∏ –º–µ–Ω—å—à–µ
bot.polling(non_stop=True, interval=0, timeout=90, long_polling_timeout=90)